/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI;

import Data.MovimientoData;
import Domain.Movimiento;
import Domain.Servicio;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class JIFMostrarServicios extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIFMostrarServicios
     */
    private JTable tablaAccesoriosPartes;
    private DefaultTableModel dftModeloTabla;
    private JScrollPane scrollPane;
    private MovimientoData movimientoData;

    public JIFMostrarServicios() {
        initComponents();
        this.movimientoData = new MovimientoData();
        this.dftModeloTabla = new DefaultTableModel();
        this.tablaAccesoriosPartes = new JTable();
        this.tablaAccesoriosPartes.setModel(this.dftModeloTabla);
        this.scrollPane = new JScrollPane(this.tablaAccesoriosPartes);
        this.scrollPane.setBounds(3, 5, 600, 350);
        this.add(this.scrollPane);
        this.crearTabla();
    }

    private void crearTabla() {
        try {
            // Limpiar las columnas existentes en el modelo de la tabla
            if (this.dftModeloTabla != null) {
                this.dftModeloTabla.setColumnCount(0); // Eliminar todas las columnas existentes

                // Agregar las nuevas columnas con los nombres correspondientes
                this.dftModeloTabla.addColumn("IDServicio");
                this.dftModeloTabla.addColumn("NombreServicio");
                this.dftModeloTabla.addColumn("Descripcion");
            }
            this.repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.cargarDatos();
    }

    private void cargarDatos() {
        // Obtener los servicios del pedido actual
        ArrayList<Servicio> servicios = this.movimientoData.obtenerServicios(); // asumiendo que "servicioData" es la instancia que maneja los datos de los servicios
        System.out.println("SERVICIOS: " + servicios.size());
        // Limpiar los datos existentes en la tabla
        if (this.dftModeloTabla != null) {
            this.dftModeloTabla.setRowCount(0); // Eliminar todas las filas existentes
        }

        // Verificar si hay datos para cargar
        if (servicios != null && !servicios.isEmpty()) {
            // Iterar sobre cada servicio y agregarlo a la tabla
            for (Servicio servicio : servicios) {
                Object[] rowData = new Object[]{
                    servicio.getIDServicio(),
                    servicio.getNombreServicio(),
                    servicio.getDescripcion()
                };
                this.dftModeloTabla.addRow(rowData);
            }
        }
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 647, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
