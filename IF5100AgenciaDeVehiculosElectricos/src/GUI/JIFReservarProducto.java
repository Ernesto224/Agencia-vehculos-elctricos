/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI;

import Data.BaseData;
import Data.MovimientoData;
import Domain.Movimiento;
import Domain.UsuarioActivo;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class JIFReservarProducto extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIFReservarProducto
     */
    private JTable tablaAccesoriosPartes;
    private DefaultTableModel dftModeloTabla;
    private JScrollPane scrollPane;
    private MovimientoData movimientoData;
    private int idPedido;
    private int idProducto;
    private int idEmpleado;
    public JIFReservarProducto(UsuarioActivo usuarioActivo) {
        initComponents();
        inhabilitarEementos();
        this.dftModeloTabla = new DefaultTableModel();
        this.tablaAccesoriosPartes = new JTable();
        this.tablaAccesoriosPartes.setModel(this.dftModeloTabla);
        this.scrollPane = new JScrollPane(this.tablaAccesoriosPartes);
        this.scrollPane.setBounds(3, 350, 600, 200);
        this.add(this.scrollPane);
        this.idPedido = -1;
        this.idProducto = -1;
        this.movimientoData = new MovimientoData();
        this.crearTabla();
        this.idEmpleado = usuarioActivo.getId();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jlabelIDPedido = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jlbTotal = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Generar Pedido");

        jLabel2.setText("ID Producto");

        jLabel3.setText("ID Almac√©n");

        jLabel4.setText("Cantidad");

        jLabel5.setText("ID Cliente");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setText("Generar Pedido");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Agregar producto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Lista de productos agregados");

        jButton3.setText("Remover producto");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel7.setText("ID Pedido");

        jlabelIDPedido.setText("ID DEL PEDIDO");

        jButton4.setText("Terminar Pedido");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jlbTotal.setText("Total: 0.0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel7)
                        .addGap(60, 60, 60)
                        .addComponent(jlabelIDPedido))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                    .addGap(49, 49, 49)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextField2)
                                        .addComponent(jTextField3)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)))))
                        .addGap(38, 38, 38)
                        .addComponent(jlbTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jlabelIDPedido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlbTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Obtener los datos de los campos de texto
        String idClienteText = jTextField4.getText();

        // Validar si los datos son n√∫meros enteros v√°lidos
        int idCliente, cantidadMovida, idAlmacen;
        try {
            idCliente = Integer.parseInt(idClienteText);

        } catch (NumberFormatException e) {
            // Mostrar un mensaje de error si alg√∫n dato no es un n√∫mero entero v√°lido
            JOptionPane.showMessageDialog(this, "El ID debe ser enteros v√°lidos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del m√©todo si hay un error
        }

        // Inicializar el ID del pedido
        this.idPedido = -1;

        // Registrar el pedido solo si el ID del pedido no est√° ya establecido
        if (this.jlabelIDPedido.getText().equals("ID DEL PEDIDO")) {
            this.idPedido = registrarPedido(idCliente);
            if (this.idPedido == -1) {
                JOptionPane.showMessageDialog(this, "El cliente no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Salir del m√©todo si hay un error
            }
            // Actualizar el JLabel con el ID del pedido
            jlabelIDPedido.setText(String.valueOf(idPedido));
        } else {
            // Obtener el ID del pedido desde el JLabel
            idPedido = Integer.parseInt(jlabelIDPedido.getText());
        }

        habilitarEementos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Obtener los datos de los campos de texto
        String idClienteText = jTextField4.getText();
        String cantidadMovidaText = jTextField3.getText();
        String idProductoText = jTextField1.getText();
        String idAlmacenText = jTextField2.getText();

        // Validar si los datos son n√∫meros enteros v√°lidos
        int idCliente, cantidadMovida, idAlmacen;
        try {
            idCliente = Integer.parseInt(idClienteText);
            cantidadMovida = Integer.parseInt(cantidadMovidaText);
            this.idProducto = Integer.parseInt(idProductoText);
            idAlmacen = Integer.parseInt(idAlmacenText);
        } catch (NumberFormatException e) {
            // Mostrar un mensaje de error si alg√∫n dato no es un n√∫mero entero v√°lido
            JOptionPane.showMessageDialog(this, "Todos los campos deben contener n√∫meros enteros v√°lidos.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del m√©todo si hay un error
        }

        // Inicializar el ID del pedido
        int idPedido = Integer.parseInt(jlabelIDPedido.getText());
        // Ejecutar el segundo procedimiento almacenado
        int resultado = agregarMovimientoInventario(cantidadMovida, this.idProducto, idAlmacen, this.idEmpleado, this.idPedido);
        if (resultado == 0) {
            JOptionPane.showMessageDialog(this, "Movimiento de inventario registrado con √©xito.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
            this.jButton1.setEnabled(true);
            registrarPedido(idCliente);
            this.cargarDatos();
            this.jlbTotal.setText("Total: "+this.movimientoData.calcularMonto(this.idPedido));

        } else {
            JOptionPane.showMessageDialog(this, "Error al registrar el movimiento de inventario.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String idProductoText = jTextField1.getText();
        if (!idProductoText.isEmpty()) {
            this.idProducto = Integer.parseInt(idProductoText);
            if (this.movimientoData.removerProducto(this.idPedido, this.idProducto)) {
                this.cargarDatos();
                this.jlbTotal.setText("Total: " + this.movimientoData.calcularMonto(this.idPedido));
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private int registrarPedido(int idCliente) {
        try {
            // Obtener la conexi√≥n a la base de datos
            BaseData baseData = new BaseData() {
            };
            Connection connection = baseData.getSqlConnection();

            // Preparar la llamada al procedimiento almacenado
            String sql = "{? = call FinanzaVenta.sp_RegistrarPedido(?)}";
            CallableStatement callableStatement = connection.prepareCall(sql);

            // Registrar el par√°metro de salida para el valor de retorno
            callableStatement.registerOutParameter(1, java.sql.Types.INTEGER);

            // Establecer los par√°metros del procedimiento almacenado
            callableStatement.setInt(2, idCliente);

            // Ejecutar el procedimiento almacenado
            callableStatement.execute();

            // Obtener el valor de retorno del procedimiento almacenado
            int resultado = callableStatement.getInt(1);

            // Cerrar la conexi√≥n
            connection.close();

            return resultado;
        } catch (SQLException ex) {
            // Mostrar un mensaje de error si ocurre alguna excepci√≥n SQL
            JOptionPane.showMessageDialog(this, "Error el registro del pedido: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return -1; // Retornar -1 en caso de error
        }
    }

    private int agregarMovimientoInventario(int cantidadMovida, int idProducto, int idAlmacen, int idEmpleado, int idPedido) {
        try {
            // Obtener la conexi√≥n a la base de datos
            BaseData baseData = new BaseData() {
            };
            Connection connection = baseData.getSqlConnection();

            // Preparar la llamada al procedimiento almacenado
            String sql = "{? = call Stock.sp_AgregarMovimientoInventario(?, ?, ?, ?, ?)}";
            CallableStatement callableStatement = connection.prepareCall(sql);

            // Registrar el par√°metro de salida para el valor de retorno
            callableStatement.registerOutParameter(1, java.sql.Types.INTEGER);

            // Establecer los par√°metros del procedimiento almacenado
            callableStatement.setInt(2, cantidadMovida);
            callableStatement.setInt(3, idProducto);
            callableStatement.setInt(4, idAlmacen);
            callableStatement.setInt(5, idEmpleado);
            callableStatement.setInt(6, idPedido);

            // Ejecutar el procedimiento almacenado
            callableStatement.execute();

            // Obtener el valor de retorno del procedimiento almacenado
            int resultado = callableStatement.getInt(1);

            // Cerrar la conexi√≥n
            connection.close();

            return resultado;
        } catch (SQLException ex) {
            // Mostrar un mensaje de error si ocurre alguna excepci√≥n SQL
            JOptionPane.showMessageDialog(this, "Error al ejecutar el movimiento de inventario: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return -1; // Retornar -1 en caso de error
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel jlabelIDPedido;
    private javax.swing.JLabel jlbTotal;
    // End of variables declaration//GEN-END:variables

    private void habilitarEementos() {
        jTextField1.setEnabled(true);
        jTextField2.setEnabled(true);
        jTextField3.setEnabled(true);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
    }

    private void inhabilitarEementos() {
        jTextField1.setEnabled(false);
        jTextField2.setEnabled(false);
        jTextField3.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
    }

    private void crearTabla() {
        try {
            // Limpiar las columnas existentes en el modelo de la tabla
            if (this.dftModeloTabla != null) {
                this.dftModeloTabla.setColumnCount(0); // Eliminar todas las columnas existentes

                // Agregar las nuevas columnas con los nombres correspondientes
                this.dftModeloTabla.addColumn("IDProducto");
                this.dftModeloTabla.addColumn("Vehiculo");
                this.dftModeloTabla.addColumn("Accesorio");
                this.dftModeloTabla.addColumn("Componente");
                this.dftModeloTabla.addColumn("CantidadMovida");
            }
            this.repaint();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void cargarDatos() {
        // Obtener los movimientos del pedido actual
        ArrayList<Movimiento> movimientos = this.movimientoData.obtenerMovimientos(this.idPedido);

        // Limpiar los datos existentes en la tabla
        if (this.dftModeloTabla != null) {
            this.dftModeloTabla.setRowCount(0); // Eliminar todas las filas existentes
        }

        // Verificar si hay datos para cargar
        if (movimientos != null && !movimientos.isEmpty()) {
            // Iterar sobre cada movimiento y agregarlo a la tabla
            for (Movimiento movimiento : movimientos) {
                // Verificar si los valores de Vehiculo, Accesorio o Componente son nulos o est√°n vac√≠os y reemplazarlos por "x" si es necesario
                String vehiculo = (movimiento.getVehiculo() != null && !movimiento.getVehiculo().isEmpty()) ? movimiento.getVehiculo() : "x";
                String accesorio = (movimiento.getAccesorio() != null && !movimiento.getAccesorio().isEmpty()) ? movimiento.getAccesorio() : "x";
                String componente = (movimiento.getComponente() != null && !movimiento.getComponente().isEmpty()) ? movimiento.getComponente() : "x";

                Object[] rowData = new Object[]{
                    movimiento.getIDProducto(),
                    vehiculo,
                    accesorio,
                    componente,
                    movimiento.getCantidadMovida()
                };
                this.dftModeloTabla.addRow(rowData);
            }
        }
        this.repaint();
    }

}
