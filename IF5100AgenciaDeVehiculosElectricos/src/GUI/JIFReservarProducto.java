/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI;

import Data.BaseData;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;

public class JIFReservarProducto extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIFReservarProducto
     */
    public JIFReservarProducto() {
        initComponents();
        inhabilitarEementos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jlabelIDPedido = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();

        setClosable(true);
        setMaximizable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Generar Pedido");

        jLabel2.setText("ID Producto");

        jLabel3.setText("ID Almac√©n");

        jLabel4.setText("Cantidad");

        jLabel5.setText("ID Cliente");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setText("Generar Pedido");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Agregar producto");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Lista de productos agregados");

        jButton3.setText("Remover producto");

        jLabel7.setText("ID Pedido");

        jlabelIDPedido.setText("ID DEL PEDIDO");

        jLabel8.setText("ID Empleado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel7)
                        .addGap(60, 60, 60)
                        .addComponent(jlabelIDPedido))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel8))
                                    .addGap(44, 44, 44)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField2)
                                            .addComponent(jTextField3)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jlabelIDPedido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

  // Obtener los datos de los campos de texto
    String idClienteText = jTextField4.getText();

    // Validar si los datos son n√∫meros enteros v√°lidos
    int idCliente, cantidadMovida, idProducto, idAlmacen, idEmpleado;
    try {
        idCliente = Integer.parseInt(idClienteText);
        
    } catch (NumberFormatException e) {
        // Mostrar un mensaje de error si alg√∫n dato no es un n√∫mero entero v√°lido
        JOptionPane.showMessageDialog(this, "El ID debe ser enteros v√°lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Salir del m√©todo si hay un error
    }

    // Inicializar el ID del pedido
    int idPedido = -1;

    // Registrar el pedido solo si el ID del pedido no est√° ya establecido
    if (this.jlabelIDPedido.getText().equals("ID DEL PEDIDO")) {
        idPedido = registrarPedido(idCliente);
        if (idPedido == -1) {
            JOptionPane.showMessageDialog(this, "El cliente no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del m√©todo si hay un error
        }
        // Actualizar el JLabel con el ID del pedido
        jlabelIDPedido.setText(String.valueOf(idPedido));
    } else {
        // Obtener el ID del pedido desde el JLabel
        idPedido = Integer.parseInt(jlabelIDPedido.getText());
    }

        habilitarEementos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      // Obtener los datos de los campos de texto
    String idClienteText = jTextField4.getText();
    String cantidadMovidaText = jTextField3.getText();
    String idProductoText = jTextField1.getText();
    String idAlmacenText = jTextField2.getText();
    String idEmpleadoText = jTextField5.getText();

    // Validar si los datos son n√∫meros enteros v√°lidos
    int idCliente, cantidadMovida, idProducto, idAlmacen, idEmpleado;
    try {
        idCliente = Integer.parseInt(idClienteText);
        cantidadMovida = Integer.parseInt(cantidadMovidaText);
        idProducto = Integer.parseInt(idProductoText);
        idAlmacen = Integer.parseInt(idAlmacenText);
        idEmpleado = Integer.parseInt(idEmpleadoText);
    } catch (NumberFormatException e) {
        // Mostrar un mensaje de error si alg√∫n dato no es un n√∫mero entero v√°lido
        JOptionPane.showMessageDialog(this, "Todos los campos deben contener n√∫meros enteros v√°lidos.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Salir del m√©todo si hay un error
    }

    // Inicializar el ID del pedido
    int idPedido = Integer.parseInt(jlabelIDPedido.getText());
    // Ejecutar el segundo procedimiento almacenado
    int resultado = agregarMovimientoInventario(cantidadMovida, idProducto, idAlmacen, idEmpleado, idPedido);
    if (resultado == 0) {
        JOptionPane.showMessageDialog(this, "Movimiento de inventario registrado con √©xito.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
        this.jButton1.setEnabled(true);
        registrarPedido(idCliente);
    } else {
        JOptionPane.showMessageDialog(this, "Error al registrar el movimiento de inventario.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed

private int registrarPedido(int idCliente) {
    try {
        // Obtener la conexi√≥n a la base de datos
        BaseData baseData = new BaseData() {};
        Connection connection = baseData.getSqlConnection();

        // Preparar la llamada al procedimiento almacenado
        String sql = "{? = call FinanzaVenta.sp_RegistrarPedido(?)}";
        CallableStatement callableStatement = connection.prepareCall(sql);

        // Registrar el par√°metro de salida para el valor de retorno
        callableStatement.registerOutParameter(1, java.sql.Types.INTEGER);

        // Establecer los par√°metros del procedimiento almacenado
        callableStatement.setInt(2, idCliente);

        // Ejecutar el procedimiento almacenado
        callableStatement.execute();

        // Obtener el valor de retorno del procedimiento almacenado
        int resultado = callableStatement.getInt(1);

        // Cerrar la conexi√≥n
        connection.close();

        return resultado;
    } catch (SQLException ex) {
        // Mostrar un mensaje de error si ocurre alguna excepci√≥n SQL
        JOptionPane.showMessageDialog(this, "Error el registro del pedido: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return -1; // Retornar -1 en caso de error
    }
}

private int agregarMovimientoInventario(int cantidadMovida, int idProducto, int idAlmacen, int idEmpleado, int idPedido) {
    try {
        // Obtener la conexi√≥n a la base de datos
        BaseData baseData = new BaseData() {};
        Connection connection = baseData.getSqlConnection();

        // Preparar la llamada al procedimiento almacenado
        String sql = "{? = call Stock.sp_AgregarMovimientoInventario(?, ?, ?, ?, ?)}";
        CallableStatement callableStatement = connection.prepareCall(sql);

        // Registrar el par√°metro de salida para el valor de retorno
        callableStatement.registerOutParameter(1, java.sql.Types.INTEGER);

        // Establecer los par√°metros del procedimiento almacenado
        callableStatement.setInt(2, cantidadMovida);
        callableStatement.setInt(3, idProducto);
        callableStatement.setInt(4, idAlmacen);
        callableStatement.setInt(5, idEmpleado);
        callableStatement.setInt(6, idPedido);

        // Ejecutar el procedimiento almacenado
        callableStatement.execute();

        // Obtener el valor de retorno del procedimiento almacenado
        int resultado = callableStatement.getInt(1);

        // Cerrar la conexi√≥n
        connection.close();

        return resultado;
    } catch (SQLException ex) {
        // Mostrar un mensaje de error si ocurre alguna excepci√≥n SQL
        JOptionPane.showMessageDialog(this, "Error al ejecutar el movimiento de inventario: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return -1; // Retornar -1 en caso de error
    }

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel jlabelIDPedido;
    // End of variables declaration//GEN-END:variables

    private void habilitarEementos() {
     jTextField1.setEnabled(true);
     jTextField2.setEnabled(true);
     jTextField3.setEnabled(true);
     jTextField5.setEnabled(true);
     jButton2.setEnabled(true);
     jButton3.setEnabled(true);
    }
    
    private void inhabilitarEementos() {
     jTextField1.setEnabled(false);
     jTextField2.setEnabled(false);
     jTextField3.setEnabled(false);
     jTextField5.setEnabled(false);
     jButton2.setEnabled(false);
     jButton3.setEnabled(false);
    }
}
